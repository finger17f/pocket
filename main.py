import asyncio
import random
import os
from datetime import datetime
import pytz
import yfinance as yf
import ta

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

# === CONFIG ===
BOT_TOKEN = "8405596682:AAHFDmGX_4hfk5_qIXudfJXC2wK9EpdtnxQ"          # <-- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHANNEL_ID = -1002902970702       # <-- –≤—Å—Ç–∞–≤—å ID –∫–∞–Ω–∞–ª–∞ (-100...)
TIMEZONE = "America/Sao_Paulo"

PAIRS = {
    "EUR/USD": "EURUSD=X",
    "GBP/USD": "GBPUSD=X",
    "USD/JPY": "JPY=X",
    "AUD/USD": "AUDUSD=X",
    "USD/CAD": "CAD=X"
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_pairs = set()       # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
bot_running = False      # —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞


# === SIGNAL LOGIC ===
def get_signal(pair_name, pair_code):
    try:
        data = yf.download(pair_code, interval="1m", period="1d", auto_adjust=False, progress=False)
        if len(data) < 20:
            return None

        df = data.tail(50).copy()
        df["ema_fast"] = ta.trend.EMAIndicator(df["Close"], 5).ema_indicator()
        df["ema_slow"] = ta.trend.EMAIndicator(df["Close"], 20).ema_indicator()
        df["rsi"] = ta.momentum.RSIIndicator(df["Close"], 14).rsi()

        last = df.iloc[-1]
        direction = "BUY" if last["ema_fast"] > last["ema_slow"] else "SELL"

        now = datetime.now(pytz.timezone(TIMEZONE)).strftime("%Y-%m-%d %H:%M:%S")
        return (
            f"‚ú® {direction} SIGNAL - {pair_name}\n"
            f"Time: {now}\n"
            f"RSI: {last['rsi']:.2f}\n"
            f"EMA: {'Bullish' if direction == 'BUY' else 'Bearish'}"
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:", e)
        return None


async def signal_loop(application):
    global bot_running
    while bot_running:
        if user_pairs:
            for pair_name in list(user_pairs):
                pair_code = PAIRS[pair_name]
                signal = get_signal(pair_name, pair_code)
                if signal:
                    await application.bot.send_message(chat_id=CHANNEL_ID, text=signal)

        delay = random.randint(120, 180)  # 2‚Äì3 –º–∏–Ω—É—Ç—ã
        await asyncio.sleep(delay)


# === TELEGRAM HANDLERS ===
def build_menu():
    keyboard = [
        [InlineKeyboardButton(p, callback_data=f"pair_{p}")] for p in PAIRS.keys()
    ]
    keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ –ø–∞—Ä—ã", callback_data="my_pairs")])
    keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="start_bot")])
    keyboard.append([InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="stop_bot")])
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=build_menu())


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running
    query = update.callback_query
    await query.answer()

    if query.data.startswith("pair_"):
        pair = query.data.replace("pair_", "")
        if pair in user_pairs:
            user_pairs.remove(pair)
            await query.message.reply_text(f"‚ùå {pair} —É–±—Ä–∞–Ω.\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {', '.join(user_pairs) or '–Ω–µ—Ç'}", reply_markup=build_menu())
        else:
            user_pairs.add(pair)
            await query.message.reply_text(f"‚úÖ {pair} –¥–æ–±–∞–≤–ª–µ–Ω.\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {', '.join(user_pairs)}", reply_markup=build_menu())

    elif query.data == "my_pairs":
        pairs_list = ", ".join(user_pairs) if user_pairs else "–Ω–µ—Ç"
        await query.message.reply_text(f"üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {pairs_list}", reply_markup=build_menu())

    elif query.data == "start_bot":
        if not user_pairs:
            await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É!", reply_markup=build_menu())
            return
        if not bot_running:
            bot_running = True
            asyncio.create_task(signal_loop(context.application))
            await query.message.reply_text("üöÄ –°–∏–≥–Ω–∞–ª—ã –∑–∞–ø—É—â–µ–Ω—ã! (–∫–∞–∂–¥—ã–µ 2‚Äì3 –º–∏–Ω—É—Ç—ã –≤ –∫–∞–Ω–∞–ª)", reply_markup=build_menu())
        else:
            await query.message.reply_text("‚ö° –°–∏–≥–Ω–∞–ª—ã —É–∂–µ –∏–¥—É—Ç.", reply_markup=build_menu())

    elif query.data == "stop_bot":
        if bot_running:
            bot_running = False
            await query.message.reply_text("‚èπ –°–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=build_menu())
        else:
            await query.message.reply_text("‚è∏ –ë–æ—Ç –∏ —Ç–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=build_menu())


# === FLASK STUB ===
app = Flask(__name__)
@app.route("/")
def index():
    return "‚úÖ Bot is running with buttons (channel mode)!"


# === MAIN ===
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    # Flask + Telegram –±–æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    import threading
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000))),
        daemon=True
    ).start()

    print("üì° Bot started with channel output!")
    application.run_polling()


if __name__ == "__main__":
    main()
